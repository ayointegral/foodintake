
## Instructions to the Engineering Team

### 1. Project Overview  
**Goal:** We’re building a personalised health and nutrition planner that provides tailored meal plans, nutritional tracking, and integration with fitness data.  
**Approach:** Begin as a web application to validate and refine core functionality. Once stable, enhance it into a Progressive Web App (PWA), then expand to native mobile apps using cross-platform frameworks such as React Native or Flutter.

### 2. Development Roadmap  
1. **Phase 1: Web MVP**  
   - **User Onboarding & Profile Setup:** Gather essential details (age, dietary preferences, health goals).  
   - **Meal Plan Generation:** Implement a basic algorithm to recommend weekly meal plans using a nutritional database.  
   - **Nutritional Tracking & Logging:** Allow users to log what they eat, see calorie/macro breakdowns, and track progress visually.  
   - **Responsive Design:** Make sure the web app looks and works great on mobile screens from the start.

2. **Phase 2: Integration & Enhancement**  
   - **Fitness Data Integration:** Sync activity data from Google Fit/Apple Health and adjust meal suggestions based on actual energy expenditure.  
   - **Educational Content:** Incorporate an educational content library (articles, infographics, short videos) to help users learn about healthy habits.  
   - **PWA Conversion:** Add a service worker and web app manifest so users can install the app on their mobile devices, enabling offline use for meal plan viewing and basic logging.

3. **Phase 3: Native Mobile App Development**  
   - **Framework Decision:** Evaluate React Native or Flutter, considering code reuse and performance.  
   - **Feature Parity:** Ensure the mobile app offers the same functionality as the web version, including meal logging, plan generation, and content browsing.  
   - **Push Notifications & Reminders:** Add mobile-native features like meal reminders, daily check-in prompts, and notifications for new educational content.  
   - **Payment Integration:** Implement native payment flows for premium subscriptions and special meal plan packs.

4. **Phase 4: Scalability, AI, and Community**  
   - **AI-Driven Personalisation:** Use machine learning models to refine meal plans and recommendations based on user feedback and habits.  
   - **Community Features:** Consider adding forums, user-generated recipes, or group challenges to foster user engagement and retention.  
   - **Security & Compliance:** Ensure secure API calls, encrypted storage of sensitive data, and compliance with local health data guidelines as needed.

### 3. Technical Guidelines  
- **Frontend:** React for web, then React Native or Flutter for mobile.  
- **Backend:** Node.js or Django for a scalable, RESTful API and consistent structure.  
- **Database:** PostgreSQL for relational data; optionally integrate a NoSQL solution for fast searches on recipes or logs.  
- **Third-Party Integrations:**
  - **Nutrition Data:** Use a service like Edamam for ingredient-level nutrient analysis.  
  - **Fitness Trackers:** Integrate with Google Fit and Apple Health APIs for activity and health metrics.  
  - **Payments:** Stripe for web subscriptions, and native payment APIs for mobile.

- **Testing & QA:**  
  - Unit tests with Jest or Mocha.  
  - End-to-end tests with Cypress or Playwright.  
  - CI/CD pipelines to ensure quick, reliable deployment.

### 4. Collaboration & Communication  
- **Documentation:** Maintain an up-to-date wiki or readme for APIs, models, and architecture decisions.  
- **Issue Tracking:** Use Jira or GitHub Projects to track sprints, tasks, bugs, and milestones.  
- **Code Reviews:** Implement mandatory review policies before merging pull requests into the main branch.  
- **Agile Practices:** Weekly sprints, daily stand-ups, and regular demos to stakeholders.

---

## Sample Prompts for the AI

Use these prompts when seeking assistance from the AI. They help clarify requirements, request code samples, or brainstorm design solutions.

### 1. Requirements and Feature Clarification  
**Prompt:**  
*“AI, we’re creating a personalised health and nutrition planner. Please outline a user onboarding flow that captures essential details like age, dietary preferences, and health goals. Include UI guidance for collecting this data and validation rules for inputs.”*

**Outcome:**  
The AI will produce a structured step-by-step onboarding process, suggest intuitive user prompts, and list basic validation checks.

### 2. Architectural Guidance  
**Prompt:**  
*“AI, we have a Node.js backend and a React frontend. Suggest a scalable folder structure and code organization pattern. Also provide best practices for handling sensitive configuration details and environment variables.”*

**Outcome:**  
The AI will propose a directory layout, naming conventions, and best practices for environment variable management (e.g., using dotenv or a secrets manager).

### 3. API Integration Help  
**Prompt:**  
*“AI, can you provide an example Node.js function that uses the Edamam API to fetch nutritional information for a list of ingredients and returns a clean JSON response?”*

**Outcome:**  
The AI will produce sample code with proper error handling, authentication (if needed), and a readable JSON structure for returned nutritional data.

### 4. UI/UX Suggestions  
**Prompt:**  
*“AI, we need a user-friendly meal logging screen. Suggest a responsive UI layout that allows users to accept our suggested meal or manually log their chosen meal. Include where to place nutritional info and a confirmation button.”*

**Outcome:**  
The AI will describe a logical and aesthetically pleasing UI layout, recommending component groupings and visual hierarchy.

### 5. Debugging and Optimization  
**Prompt:**  
*“AI, we’re experiencing slow database queries when generating meal plans. Could you suggest optimization strategies, such as indexing critical columns, caching, or modifying the schema?”*

**Outcome:**  
The AI will provide techniques to improve database performance, including query optimization, indexes, and caching layers.

### 6. Deployment and Scaling  
**Prompt:**  
*“AI, we’re ready to deploy the MVP to AWS. Could you outline a basic architecture using EC2, a load balancer, and a database service? Also, how should we handle environment variables securely?”*

**Outcome:**  
The AI will suggest an AWS deployment architecture, including load balancing, auto-scaling groups, and secure environment variable storage solutions (e.g., AWS Secrets Manager).

---

**In Summary:**  
- Provide the engineering team with a clear, step-by-step roadmap and technical guidelines.  
- Collaborate effectively by documenting decisions, using issue tracking tools, and maintaining a strong code review culture.  
- Employ the AI with carefully crafted prompts to assist with code examples, architectural decisions, and UI brainstorming.  
- Build iteratively, validate features through the web platform, and progress toward a refined mobile experience as the product matures.